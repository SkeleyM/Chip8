#pragma once
#include <string>
#include <fstream>
#include <vector>
#include <stack>

class Chip8
{
private:

	unsigned short opcode{ 0x0000 };

	unsigned char memory[4096]{ 0x0000 };
	unsigned char chipFontset[80] =
	{
	  0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	  0x20, 0x60, 0x20, 0x20, 0x70, // 1
	  0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	  0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	  0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	  0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	  0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	  0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	  0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	  0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	  0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	  0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	  0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	  0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	  0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	  0xF0, 0x80, 0xF0, 0x80, 0x80  // F
	};

	unsigned char v[16]{ 0x0000 };

	unsigned char key[16]{ false };

	unsigned short I{ 0x0000 };

	unsigned short pc{ 0x200 };

	unsigned char screenBuffer[64 * 32]{ 0x0000 };
	unsigned char delayTimer;
	unsigned int delayTickTimer;
	unsigned char soundTimer;

	unsigned short stack[16]{ 0x0200 };
	unsigned short sp{ 0 };

	float deltaTime{ 0 };

	unsigned char KeyMap[16]{
		'1', '2', '3', 'c',
		'4', '5', '6', 'd',
		'7', '8', '9', 'e',
		'a', '0', 'b', 'f'
	};
	

public:
	// Debug
	void DebugLog(std::string str);
	void DebugLog();
	void OutputKeyStates();

	bool Debugging{ false };
	bool StepExecute{ false };

	int ScreenMagnifierX{ 2 };
	int ScreenMagnifierY{ 2 };

	bool executing{ true };

	bool drawFlag;
	// Input
	char WaitForKey();
	void SetKeys();

	// Emulation
	void InitialiseCpu();
	void LoadGame(std::string File);
	void EmulateCycle();
	void OutputScreen();
};

